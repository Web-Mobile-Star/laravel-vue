stages:
  - lint
  - build
  - test
  - release
  - deploy

# Only run pipelines on tags, the master branch, and MRs.
# Note that we should not directly push to new branches without an MR!
workflow:
  rules:
    - if: $CI_COMMIT_TAG                      # Tags
    - if: $CI_MERGE_REQUEST_ID                # Merge requests
    - if: $CI_COMMIT_BRANCH == 'master'       # Push to master
    - if: '$CI_PIPELINE_SOURCE == "schedule"' # Scheduled jobs

# Perform automatic scanning processes. Some that do not work:
#
# - container scanning requires doing one Docker image per project
# - license scanning requires package.json to be at the root
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Dependency-Scanning.gitlab-ci.yml

variables:
  DOCKER: "docker"
  DOCKER_REPO: "$CI_REGISTRY_IMAGE"
  TEST_TAG: "$CI_COMMIT_REF_SLUG"
  RELEASE_TAG: "production"
  # 20210615: Maven test projects are not meant to be analyzed
  SAST_EXCLUDED_ANALYZERS: "spotbugs"

.gitlab-docker-job: &gitlab-docker-job
  image: docker:19.03.12
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - source docker-functions.sh
  services:
    - docker:19.03.12-dind
  tags:
    - docker
    - gce

.gitlab-job: &gitlab-job
  tags:
    - docker
    - gce

lint:license:
  <<: *gitlab-job
  image: alpine
  stage: lint
  script:
    - apk add --no-cache git
    - git ls-files -z '*.java' '*.php' '*.js' '*.css' | xargs -0 fgrep -q 'Licensed under the Apache License, Version 2.0'

lint:markdown:
  <<: *gitlab-job
  image: ruby:2.7
  stage: lint
  script:
    - gem install mdl
    - git ls-files -z '*.md' | xargs -0 mdl --style .mdl.rb

build-app:
  <<: *gitlab-docker-job
  stage: build
  script:
    - build_test_image app $TEST_TAG
    - push_image app $TEST_TAG
  rules:
    - changes: &changes-app
        - docker/app/**/*
        - webapp/**/*
    - changes: &changes-worker
        - docker/worker/**/*
        - webapp/**/*
    - changes: &changes-testing
        - ./*.sh
        - ./docker-compose*.yml

build-worker:
  <<: *gitlab-docker-job
  stage: build
  script:
    - build_test_image worker $TEST_TAG
    - push_image worker $TEST_TAG
  rules:
    - changes: *changes-worker
    - changes: *changes-app
    - changes: *changes-testing

build-nginx:
  <<: *gitlab-docker-job
  stage: build
  script:
    - build_test_image nginx $TEST_TAG
    - push_image nginx $TEST_TAG
  rules:
    - changes: &changes-nginx
        - docker/nginx/**/*
        - webapp/**/*

build-echo:
  <<: *gitlab-docker-job
  stage: build
  script:
    - build_test_image echo $TEST_TAG
    - push_image echo $TEST_TAG
  rules:
    - changes: &changes-echo
        - docker/echo/**/*

test-app:
  <<: *gitlab-docker-job
  stage: test
  script:
    - apk add --no-cache docker-compose
    - pull_image app $TEST_TAG
    - pull_image worker $TEST_TAG
    - sh it-test.sh
  rules:
    - changes: *changes-app
    - changes: *changes-worker
    - changes: *changes-testing
  artifacts:
    reports:
      junit: it-test/junit.xml

test-migrations:
  <<: *gitlab-docker-job
  stage: test
  script:
    - apk add --no-cache docker-compose
    - pull_image app $TEST_TAG
    - ./it-artisan.sh migrate -n --force
    - ./it-artisan.sh migrate:refresh -n --force
  rules:
    - changes: *changes-app
    - changes: *changes-testing

release-app:
  <<: *gitlab-docker-job
  stage: release
  script:
    - pull_image app $TEST_TAG
    - release_test_image app $TEST_TAG $RELEASE_TAG
    - push_image app $RELEASE_TAG
  rules:
    - &rules-release-app
      if: '$CI_COMMIT_BRANCH == "master"'
      changes: *changes-app

release-worker:
  <<: *gitlab-docker-job
  stage: release
  script:
    - pull_image worker $TEST_TAG
    - release_test_image worker $TEST_TAG $RELEASE_TAG
    - push_image worker $RELEASE_TAG
  rules:
    - &rules-release-worker
      if: '$CI_COMMIT_BRANCH == "master"'
      changes: *changes-worker

release-nginx:
  <<: *gitlab-docker-job
  stage: release
  script:
    - pull_image nginx $TEST_TAG
    - release_test_image nginx $TEST_TAG $RELEASE_TAG
    - push_image nginx $RELEASE_TAG
  rules:
    - &rules-release-nginx
      if: '$CI_COMMIT_BRANCH == "master"'
      changes: *changes-nginx

release-echo:
  <<: *gitlab-docker-job
  stage: release
  script:
    - pull_image echo $TEST_TAG
    - release_test_image echo $TEST_TAG $RELEASE_TAG
    - push_image echo $RELEASE_TAG
  rules:
    - &rules-release-echo
      if: '$CI_COMMIT_BRANCH == "master"'
      changes: *changes-echo

deploy:
    stage: deploy
    script:
        - echo $CI_REGISTRY_PASSWORD | sudo docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
        - $COMPOSE_SCRIPT pull
        - $COMPOSE_SCRIPT stop nginx
        - $COMPOSE_SCRIPT up -d
    rules:
        - if: '$WEBSITE_URL == null'
          when: never
        - *rules-release-app
        - *rules-release-worker
        - *rules-release-nginx
        - *rules-release-echo
    tags:
        - production
    environment:
        name: production
        url: $WEBSITE_URL
